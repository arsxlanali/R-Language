library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
data <- read.csv("legosets.csv")
print(data)
nrow(df)
(data)
colnames(data)
summary(data)
summary(data$subtheme)
summary(data$theme)
newlego <- mutate(lego, decade=as.character(year-year%%10))
lego <- read.csv("legosets.csv")
nrow(lego)
colnames(lego)
summary(lego$theme)
newlego <- mutate(lego, decade=as.character(year-year%%10))
library(ggplot2)
ggplot(data, aes(x=years, y=decade)) +
geom_bar(stat = "identity")
ggplot(data, aes(x=year, y=decade)) +
geom_bar(stat = "identity")
ggplot(newlego, aes(x=year, y=decade)) +
geom_bar(stat = "identity")
View(lego)
View(lego)
subset(lego, theme=='Harry Potter')
harry <-subset(lego, theme=='Harry Potter')
View(harry)
summarise(harry)
summary(harry)
library(tidyverse)
happy = read_csv('world_happiness.csv')
happy = read_csv('world_happiness.csv')
library(GGally)
library(tidyverse)
happy = read_csv('world_happiness.csv')
library(GGally)
install.packages('GGally')
library(GGally)
happy %>% select(-country) %>% ggpairs(aes(colour=region))
View(happy)
View(happy)
results <- princomp(happy)
na.omit(happy)
results <- princomp(happy)
res.pca <- PCA(happy,  graph = FALSE)
(factoextra)
install.packages('factoextra')
library(factoextra)
library(FactoMineR)
res.pca <- PCA(happy,  graph = FALSE)
res.pca <- PCA(happy[['score', 'gdp']],  graph = FALSE)
res.pca$eig
library(tidyverse)
cereals = read_csv('cereals.csv')
View(cereals)
View(cereals)
lm <- lm(energy ~., data = income.data)
lm <- lm(energy ~., data = cereals)
summary(lm)
plot(cereals$protein, cereals$energy)
#add line of best fit to scatter plot
abline(lm(y ~ x))
#add line of best fit to scatter plot
abline(lm(y ~ x))
#add line of best fit to scatter plot
abline(lm(Y ~ x))
#add line of best fit to scatter plot
abline(lm(energy ~., data = cereals))
library(tidyverse)
library(ggfortify)
install.packages('ggfortify')
library(ggfortify)
autoplot(model, data=cereals, colour="manufacturer")
autoplot(lm, data=cereals, colour="manufacturer")
autoplot(lm, data=cereals, colour="manufacturer")
cereals = read_csv('cereals.csv')
lm <- lm(energy ~., data = cereals)
summary(lm)
lm <- lm(energy ~protein+carbohudrate+dietary_fibre, data = cereals)
lm <- lm(energy ~protein+carbohydrate+dietary_fibre, data = cereals)
summary(lm)
plot(cereals$protein, cereals$energy)
#add line of best fit to scatter plot
abline(lm(energy ~., data = cereals))
library(ggfortify)
autoplot(lm, data=cereals, colour="manufacturer")
#add line of best fit to scatter plot
abline(lm)
lm <- lm(energy ~protein+carbohydrate+dietary_fibre, data = cereals)
summary(lm)
plot(cereals$protein, cereals$energy)
#add line of best fit to scatter plot
abline(lm)
autoplot(lm, data=cereals, colour="manufacturer")
happy = read_csv('world_happiness.csv')
install.packages('GGally')
library(GGally)
happy %>% select(-country) %>% ggpairs(aes(colour=region))
harry <-subset(lego, theme=='Harry Potter')
library(tidyverse)
lego <- read.csv("legosets.csv")
nrow(lego)
colnames(lego)
summary(lego$theme)
lego <- read.csv("legosets.csv")
newlego <- mutate(lego, decade=as.character(year-year%%10))
library(ggplot2)
ggplot(newlego, aes(x=year, y=decade)) +
geom_bar(stat = "identity")
ggplot(newlego, aes(year, decade)) + geom_boxplot()
ggplot(newlego, aes(decade, decade)) + geom_boxplot()
ggplot(newlego, aes(decade, year)) + geom_boxplot()
ggplot(newlego, aes(year, decade)) + geom_boxplot()
View(newlego)
View(newlego)
ggplot(newlego, aes(minifigures, decade)) + geom_boxplot()
ggtitle("Distribution of minifigures")
ggplot(newlego, aes(minifigures, decade)) + geom_boxplot()
ggplot(newlego, aes(minifigures, decade)) + geom_boxplot()+ggtitle("Distribution of minifigures")
lm(_coefficent)
cereals = read_csv('cereals.csv')
lm <- lm(energy ~protein+carbohydrate+dietary_fibre, data = cereals)
View(cereals)
View(cereals)
predict(lm, newdata = [8.6, 30.0])
predict(lm, newdata =[8.6, 30.0])
predict <- data.frame(
carbohydrate = c (8.6),
dietary_fibre c(30.0))
predict <- data.frame(carbohydrate = c(8.6), dietary_fibre c(30.0))
predict <- data.frame(carbohydrate = c(8.6), dietary_fibre=c(30.0))
predict(lm, newdata =predict)
predict <- data.frame(carbohydrate = c(50.6), dietary_fibre=c(2.5), protein=c(8.6))
predict(lm, newdata =predict)
library(ggfortify)
happy = read_csv('world_happiness.csv')
pca_res <- prcomp(happy, scale. = TRUE)
View(happy)
View(happy)
happy <- happy[['score','gdp']]
happy <- happy[['score','gdp']]
df = subset(mydata, select = c(score,gdp))
df = subset(mydata, select = c('score','gdp'))
df = subset(happy, select = c('score','gdp'))
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
df = subset(happy, select = c('score','gdp','region'))
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
df = subset(happy, select = c('score','gdp','freedom'))
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
df = subset(happy, select = c('score','gdp','freedom','generosity'))
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
df = subset(happy, select = c('score','gdp','freedom','generosity','corruption'))
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
df = subset(happy, select = c('score','gdp','freedom','generosity','corruption','healthy_life_exp'))
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
df = subset(happy, select = c('score','gdp','freedom','generosity','corruption','healthy_life_exp','social_support'))
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
